
import streamlit as st
import pandas as pd
import io
import fitz
import re
from docx import Document

st.set_page_config(page_title="Calculadora EPH ‚Äì Informe Autom√°tico", layout="wide")
st.title("üìä Calculadora EPH ‚Äì Informe Excel + Word")

anio = st.selectbox("üìÖ Seleccion√° el a√±o de la base", ["2017", "2018", "2019", "2020", "2021", "2022", "2023"])
hogares_file = st.file_uploader("üè† Base de Hogares anual (.xlsx)", type="xlsx")
individuos_file = st.file_uploader("üë§ Base de Individuos anual (.xlsx)", type="xlsx")
instructivo_pdf = st.file_uploader("üìÑ Instructivo PDF", type="pdf")

def limpiar_descripcion_variable(desc):
    desc = desc.replace(".....", "").replace("....", "").replace("...", "").strip()
    correcciones = {
        "Tiene agua": "Acceso al agua",
        "El agua es de": "Fuente de agua",
        "¬øtiene ba√±o/letrina?": "Tiene ba√±o o letrina",
        "El ba√±o o letrina est√°": "Ubicaci√≥n del ba√±o o letrina",
        "El ba√±o tiene": "Tipo de ba√±o",
        "El desague del ba√±o es": "Desag√ºe del ba√±o",
        "La vivienda est√° ubicada cerca de basural/es(3": "Proximidad a basural",
        "La vivienda est√° ubicada en zona inundable": "Zona inundable",
        "La vivienda est√° ubicada en villa de emergencia": "Vivienda en villa de emergencia"
    }
    for parcial, reemplazo in correcciones.items():
        if parcial.lower() in desc.lower():
            return reemplazo
    return desc.strip().capitalize()

def extraer_diccionario_desde_pdf(pdf_file):
    text = ""
    doc = fitz.open(stream=pdf_file.read(), filetype="pdf")
    for page in doc:
        text += page.get_text()
    doc.close()
    regex = re.compile(r"^(\w{2,})\s+[NC]\(\d+\)\s+(.+)$", re.MULTILINE)
    matches = regex.findall(text)
    return {codigo.strip(): limpiar_descripcion_variable(desc) for codigo, desc in matches}

def generar_informe_word(anio):
    doc = Document()
    doc.add_heading(f"Informe Interpretativo EPH ‚Äì Anual {anio}", level=1)

    doc.add_heading("üè† Base de Hogares ‚Äì Interpretaci√≥n", level=2)
    doc.add_paragraph(
        "El an√°lisis de la base de hogares del a√±o " + anio + " permite observar las caracter√≠sticas generales de las viviendas y su entorno. "
        "Se examinan variables clave como el tipo de vivienda, el acceso al agua potable, el sistema de eliminaci√≥n de excretas, y la ubicaci√≥n geogr√°fica por regi√≥n. "
        "Una alta proporci√≥n de viviendas son casas individuales, lo que sugiere una estructura residencial tradicional. "
        "El acceso al agua dentro de la vivienda, si es elevado, refleja buenas condiciones sanitarias, aunque a√∫n pueden existir disparidades regionales. "
        "El an√°lisis de los indicadores de ingresos, como el ITF (Ingreso Total Familiar) y el IPCF (Ingreso Per C√°pita Familiar), permite dimensionar la capacidad econ√≥mica de los hogares y detectar situaciones de vulnerabilidad econ√≥mica."
    )

    doc.add_heading("üë§ Base de Individuos ‚Äì Interpretaci√≥n", level=2)
    doc.add_paragraph(
        "El an√°lisis de los individuos residentes en estos hogares ofrece una perspectiva sobre la composici√≥n sociodemogr√°fica y el acceso a derechos b√°sicos. "
        "Las variables de sexo y edad permiten caracterizar la pir√°mide poblacional, mientras que el nivel educativo alcanzado brinda informaci√≥n sobre las capacidades formativas de la poblaci√≥n. "
        "El indicador de condici√≥n de actividad revela la proporci√≥n de personas ocupadas, desocupadas o inactivas, informaci√≥n clave para evaluar la situaci√≥n del mercado laboral. "
        "Una alta proporci√≥n de inactivos puede indicar una estructura etaria envejecida, alta proporci√≥n de estudiantes o dificultades en el acceso al empleo formal. "
        "El an√°lisis de los ingresos individuales, junto con los indicadores familiares, permite evaluar desigualdades econ√≥micas dentro y entre regiones."
    )

    doc.add_heading("üìå Conclusi√≥n General", level=2)
    doc.add_paragraph(
        "El informe anual consolidado de hogares e individuos de la Encuesta Permanente de Hogares para el a√±o " + anio +
        " proporciona evidencia cuantitativa √∫til para la formulaci√≥n de pol√≠ticas p√∫blicas, el monitoreo de la inclusi√≥n social y la evaluaci√≥n de condiciones de vida. "
        "Los resultados muestran c√≥mo se distribuyen los recursos, el acceso a servicios esenciales, el perfil educativo y la inserci√≥n laboral de la poblaci√≥n urbana argentina. "
        "Este tipo de an√°lisis es fundamental para identificar desigualdades estructurales, orientar intervenciones estatales y promover el desarrollo con equidad."
    )
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

    doc = Document()
    doc.add_heading(f"Informe Interpretativo EPH ‚Äì Anual {anio}", level=1)
    doc.add_heading("üè† Base de Hogares ‚Äì Interpretaci√≥n", level=2)
    doc.add_paragraph("El an√°lisis incluye distribuci√≥n regional, condiciones habitacionales, acceso a servicios b√°sicos y tipolog√≠a de vivienda.")
    doc.add_heading("üë§ Base de Individuos ‚Äì Interpretaci√≥n", level=2)
    doc.add_paragraph("Se analiza la distribuci√≥n por sexo, edad, nivel educativo, condici√≥n de actividad e ingresos.")
    doc.add_heading("üìå Conclusi√≥n General", level=2)
    doc.add_paragraph("Este informe permite identificar patrones sociales y econ√≥micos de la poblaci√≥n urbana argentina para el a√±o seleccionado.")
    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

if hogares_file and individuos_file and instructivo_pdf:
    mapa = extraer_diccionario_desde_pdf(instructivo_pdf)
    df_hogar = pd.read_excel(hogares_file)
    df_ind = pd.read_excel(individuos_file)

    if mapa:
        df_hogar = df_hogar.rename(columns=mapa)
        df_ind = df_ind.rename(columns=mapa)

    if "CODUSU" in df_hogar.columns and "NRO_HOGAR" in df_hogar.columns:
        df_hogar = df_hogar.drop_duplicates(subset=["CODUSU", "NRO_HOGAR"])
    if all(x in df_ind.columns for x in ["CODUSU", "NRO_HOGAR", "COMPONENTE"]):
        df_ind = df_ind.drop_duplicates(subset=["CODUSU", "NRO_HOGAR", "COMPONENTE"])

    # Usar columnas nominales o crudas
    posibles_hogar = ["ingreso", "regi√≥n", "agua", "ba√±o", "vivienda", "ipcf", "itf", "PONDIH"]
    posibles_ind = ["sexo", "edad", "educ", "actividad", "ingreso", "ESTADO", "CH04", "CH05", "NIVEL_ED", "ITF", "IPCF"]

    cols_hogar = [c for c in df_hogar.columns if any(x in c.lower() for x in posibles_hogar)]
    cols_ind = [c for c in df_ind.columns if any(x in c.lower() for x in posibles_ind)]

    if not cols_hogar:
        st.warning("No se encontraron columnas clave en la base de hogares. Se usar√°n columnas originales si son √∫tiles.")
        cols_hogar = df_hogar.columns[:10].tolist()

    if not cols_ind:
        st.warning("No se encontraron columnas clave en la base de individuos. Se usar√°n columnas originales si son √∫tiles.")
        cols_ind = df_ind.columns[:10].tolist()

    resumen_hogar = df_hogar[cols_hogar].describe(include="all").transpose()
    resumen_ind = df_ind[cols_ind].describe(include="all").transpose()

    output_excel = io.BytesIO()
    with pd.ExcelWriter(output_excel, engine="openpyxl") as writer:
        resumen_hogar.to_excel(writer, sheet_name="Resumen Hogares")
        resumen_ind.to_excel(writer, sheet_name="Resumen Individuos")
    output_excel.seek(0)

    output_word = generar_informe_word(anio)

    st.success("‚úÖ An√°lisis generado.")
    st.download_button("üì• Descargar Excel", data=output_excel, file_name=f"informe_eph_{anio}.xlsx")
    st.download_button("üì• Descargar Informe Interpretativo (Word)", data=output_word, file_name=f"informe_eph_{anio}.docx")
else:
    st.info("üì• Sub√≠ las bases de hogares, individuos y el instructivo PDF para comenzar.")
